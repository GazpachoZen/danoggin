Danoggin is a cognitive check-in application with two primary user roles: Responders and Observers. The app is designed to monitor cognitive awareness through periodic quiz-like check-ins. Admin functionality for the related Firestore database and images is provided through a family of Python scripts. Below is an overview of some key points. I will begin each new chat in this project by providing relevant source code in my GitHub repository. 

Main roles...
- Responders: Users who answer periodic quiz questions
- Observers: Users who monitor responders' performance on check-ins

Main Functionality...
- Question-based check-ins with multiple-choice answers
- Scheduled notifications to prompt responders to complete check-ins
- Tracking of missed/incorrect responses
- Observer dashboard to monitor responder performance
- Relationship management between responders and observers

Architecture...
- Flutter-based mobile app with Firebase backend
- FireStore for data storage
- Firebase's FCM mechanism for coordination notifications
- Firebase Cloud Storage for image assets
- Firebase Authentication for user management

Admin Tools...
- Python scripts for backend management
- Firebase management utilities

Additional...
- I do not have access to a Mac; I am not using xCode. My iOS builds are handled exclusively through codemagic, using its workflow (not yamls)
- I am working on a Windows system - not Linux.
- We are using Firestore's mechanism for test Android releases
- We are using Diawi for releases on iOS

Preferences/constraints...
- For situations where we have a several steps, each relying on completion of the prior, supply them only one at a time and await confirmation of success before providing the next step.
- I welcome modifications that might require multiple steps, understanding that these are sometimes warranted. When that happens, I prefer that you show them to me one file at a time. I do NOT want a blitz of file modifications to be shown as a single output from you. 
- If modifications to a file are modest, show them to me with instructions on where to make the edits. If the modifications are extensive, ask me if I'd prefer to have you provide the full file.
- When generating TypeScript code, always make it compliant with lint rules.
- Always give a critical eye to things I might suggest. If there are down-sides to my ideas, we should discuss them up front. 